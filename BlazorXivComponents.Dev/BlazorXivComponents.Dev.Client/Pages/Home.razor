@page "/"
@rendermode InteractiveAuto

<PageTitle>Home</PageTitle>

<div id="container">
    <h1 class="h1">@nameof(XivFrame)</h1>

    <XivFrame>@nameof(XivFrame)</XivFrame>

    <h1 class="h1">@nameof(XivWindow)</h1>
    <XivWindow Label="@nameof(XivWindow)">@nameof(XivWindow) content</XivWindow>
    <XivWindow Label="@($"{nameof(XivWindow)} non-formatted")" Formatted="false">@nameof(XivWindow) content</XivWindow>

    <h1 class="h1">@nameof(XivCheckbox)</h1>
    <XivCheckbox>Checkbox</XivCheckbox>
    <XivCheckbox Checked="true">Checkbox checked</XivCheckbox>
    <XivCheckbox Highlighted="true">Checkbox highlighted</XivCheckbox>
    <XivCheckbox Checked="true" Highlighted="true">Checkbox checked highlighted</XivCheckbox>
    <XivWindow Label="@nameof(XivCheckbox)">
        <XivCheckbox>Checkbox</XivCheckbox>
        <XivCheckbox @bind-Checked="_checked">Checkbox checked with two way binding</XivCheckbox>
        Checked: @_checked
        <XivCheckbox Highlighted="true">Checkbox highlighted</XivCheckbox>
        <XivCheckbox Checked="true" Highlighted="true">Checkbox checked highlighted</XivCheckbox>
    </XivWindow>
    <XivWindow Label="@($"{nameof(XivCheckbox)} non-formatted")" Formatted="false">
        <XivCheckbox>Checkbox</XivCheckbox>
        <XivCheckbox Checked="true">Checkbox checked</XivCheckbox>
        <XivCheckbox Highlighted="true">Checkbox highlighted</XivCheckbox>
        <XivCheckbox Checked="true" Highlighted="true">Checkbox checked highlighted</XivCheckbox>
    </XivWindow>

    <h1 class="h1">@nameof(XivButton)</h1>
    <XivButton>This is a button</XivButton>
    <XivButton Disabled="true">Disabled button</XivButton>
    <XivWindow Label="@nameof(XivButton)">
        <XivButton OnClick="_ => _buttonPressed = true">Interactive button</XivButton>
        Button pressed: @_buttonPressed
        <XivButton Disabled="true">Disabled button</XivButton>
    </XivWindow>
    <XivWindow Label="@($"{nameof(XivButton)} non-formatted")" Formatted="false">
        <XivButton>This is a button</XivButton>
        <XivButton Disabled="true">Disabled button</XivButton>
    </XivWindow>

    <h1 class="h1">@nameof(XivSelect<>)</h1>
    <XivSelect Categories="@CreateSelectDataString()"></XivSelect>
    <XivSelect Categories="@CreateSelectDataString()" Disabled="true"></XivSelect>
    <XivSelect Categories="@CreateSelectDataString()" SelectedValue="@("option2")"></XivSelect>
    <XivWindow Label="@nameof(XivSelect<>)">
        <XivSelect Categories="@CreateSelectDataString()"></XivSelect>
        <XivSelect Categories="@CreateSelectDataString()" Disabled="true"></XivSelect>
        <XivSelect Categories="@CreateSelectDataString()" SelectedValue="@("option2")"></XivSelect>
        <XivSelect Categories="@CreateSelectDataString()" @bind-SelectedValue="_selectedString"></XivSelect>
        Selected option: @_selectedString
    </XivWindow>
    <XivWindow Label="@($"{nameof(XivSelect<>)} non-formatted")" Formatted="false">
        <XivSelect Categories="@CreateSelectDataString()"></XivSelect>
        <XivSelect Categories="@CreateSelectDataString()" Disabled="true"></XivSelect>
        <XivSelect Categories="@CreateSelectDataString()" SelectedValue="@("option2")"></XivSelect>
    </XivWindow>

    <h1 class="h1">@nameof(XivPopup<>)</h1>
    <XivPopup T="string" @ref="_popup"/>
    <XivWindow Label="@nameof(XivPopup<>)">
        <div class="flex flex-wrap gap-4">
            <XivButton OnClick="_ => OpenPopup(XivPopupDataGenerator.CreateTextOnly)">
                @nameof(XivPopupType.TextOnly)
            </XivButton>
            <XivButton OnClick="_ => OpenPopup(XivPopupDataGenerator.CreateOk, true)">
                @nameof(XivPopupType.Ok)
            </XivButton>
            <XivButton OnClick="_ => OpenPopup(XivPopupDataGenerator.CreateOkCancel, true)">
                @nameof(XivPopupType.OkCancel)
            </XivButton>
            <XivButton OnClick="_ => OpenPopup(XivPopupDataGenerator.CreateYesNo, true)">
                @nameof(XivPopupType.YesNo)
            </XivButton>
        </div>
        <div class="flex flex-wrap gap-4">
            <XivButton OnClick="_ => OpenPopup(() =>
                           XivPopupDataGenerator.CreateOkCancelWithCheckbox(false, false), true)">
                checkbox
            </XivButton>
            <XivButton OnClick="_ => OpenPopup(() =>
                           XivPopupDataGenerator.CreateOkCancelWithCheckbox(false, true), true)">
                highlighted checkbox
            </XivButton>
            <XivButton OnClick="_ => OpenPopup(() =>
                           XivPopupDataGenerator.CreateOkCancelWithCheckbox(true, false), true)">
                with checked checkbox
            </XivButton>
            <XivButton OnClick="_ => OpenPopup(() =>
                           XivPopupDataGenerator.CreateOkCancelWithCheckbox(true, true), true)">
                highlighted and checked checkbox
            </XivButton>
        </div>
        <div class="flex flex-wrap gap-4">
            <XivButton OnClick="_ => OpenPopup(XivPopupDataGenerator.CreateOkCancelWithWarning, true)">
                warning
            </XivButton>
            <XivButton OnClick="_ => OpenPopup(XivPopupDataGenerator.CreateOkCancelWithWarningAndCheckbox, true)">
                warning and checkbox
            </XivButton>
        </div>
        Result: @_popupResult?.Value<br/>
        Checkbox checked: @(_popupResult?.CheckboxChecked is true ? "true" : "false")
    </XivWindow>
</div>

@code {
    private bool _checked = true;
    private bool _buttonPressed;
    private string _selectedString = "option3";
    private XivPopup<string> _popup = null!;
    private XivPopupResult<string>? _popupResult;

    private static ICollection<XivSelectCategory<string>> CreateSelectDataString()
    {
        List<XivSelectCategory<string>> categories =
        [
            new("category",
            [
                new XivSelectOption<string>("option1", "Option 1"),
                new XivSelectOption<string>("option2", "Option 2"),
                new XivSelectOption<string>("option3", "Option 3")
            ])
        ];

        return categories;
    }

    private async Task OpenPopup(Func<XivPopupOptions<string>> dataGenerator, bool assign = false)
    {
        var options = dataGenerator.Invoke();

        var result = await _popup.OpenAsync(options);
        if (assign)
        {
            _popupResult = result;
        }
    }

}