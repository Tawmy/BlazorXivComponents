@typeparam T

<div class="xiv-select">
    <InputSelect @bind-Value:get="SelectedValue" @bind-Value:set="@SetSelectedValueAsync"
                 AdditionalAttributes="@CreateAdditionalAttributes()">
        @if (Categories.Count > 1)
        {
            @foreach (var (category, options) in Categories)
            {
                <optgroup label="@category">
                    @foreach (var option in options)
                    {
                        <option value="@option.Value">@option.Label</option>
                    }
                </optgroup>
            }
        }
        else
        {
            @foreach (var option in Categories.First().Options)
            {
                <option value="@option.Value">@option.Label</option>
            }
        }
    </InputSelect>
    <div class="inset-shadow"></div>
</div>


@code {
    [Parameter] [EditorRequired] public required ICollection<XivSelectCategory<T>> Categories { get; set; }

    [Parameter] public EventCallback<T> SelectedValueChanged { get; init; }

    [Parameter] public T? SelectedValue { get; set; }

    [Parameter] public bool Disabled { get; set; }

    private async Task SetSelectedValueAsync(T? value)
    {
        if (value is null)
        {
            throw new InvalidOperationException("Select value must not be null.");
        }

        SelectedValue = value;
        await SelectedValueChanged.InvokeAsync(value);
    }

    private IReadOnlyDictionary<string, object> CreateAdditionalAttributes()
    {
        return new Dictionary<string, object>
        {
            { "disabled", !RendererInfo.IsInteractive || Disabled }
        };
    }

}